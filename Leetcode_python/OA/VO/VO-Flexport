

token_dic = {'R':3, 'B':3, 'K':3, 'G'‍‍‍‌‌‌‍‌‌‌‍‌‌‍‍‍‌‍‌: 3, 'W': 3, 'A': 2}
player = Player(token_dic)
cost_token_dic = {'B': 1, 'G': 2}
card = Card(0, cost_token_dic, 'B')
print(can_purchase(player, card))
make_purchase(player, card)
print(player.token_dic, player.card_list)
print(can_purchase(player, card))
make_purchase(player, card)
print(player.token_dic, player.card_list)
print(can_purchase(player, card))
make_purchase(player, card)
print(player.token_dic, player.card_list)
"""
print(can_purchase(player, card))
make_purchase(player, card)
print(player.token_dic, player.card_list)
print(can_purchase(player, card))
cost_token_dic2 = {'R':2}
card2 = Card(0, cost_token_dic2, 'G')
print(can_purchase(player, card))
cost_token_dic3 = {'B':2}
card3 = Card(0, cost_token_dic3, 'G')
print(can_purchase(player, card))
cost_token_dic4 = {'G':2}
card4 = Card(0, cost_token_dic4, 'G')
print(can_purchase(player, card))
# discount_dic['G'] = 3
# discount_dic['B'] = 1
"""

board = {}

def display_board(board):
    print("Current Board:")
    keys = list(board.keys())
    keys.sort()
    for key in keys:
        print("{}: {}".format(key, board[key]))

def place_piece(board, player, row, col):
    board[(row, col)] = player

def check_winner(board, player, row, col):
    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
    for direction in directions:
        count = 0
        r, c = row, col
        while (r, c) in board and board[(r, c)] == player:
            count += 1
            if count == 3:
                return True
            r += direction[0]
            c += direction[1]
    return False

def check_winner(board, player, row, col):
    directions = [(0, 0), (1, 1), (0, 1), (1, 0), (1, -1), (-1, -1), (0, -1), (-1, 0), (-1, 1)]
    for dir_index in range(1, 5):
        count = 0
        r, c = row, col
        cur_dir_r = directions[dir_index][0]
        cur_dir_c = directions[dir_index][1]
        while (r, c) in board and board[(r, c)] == player:
            count += 1
            if count >= 3:
                return True
            r += cur_dir_r
            c += cur_dir_c
        cur_dir_r = directions[dir_index * 2][0]
        cur_dir_c = directions[dir_index * 2][1]
        r, c = row + cur_dir_r, col + cur_dir_c
        while (r, c) in board and board[(r, c)] == player:
            count += 1
            if count >= 3:
                return True
            r += cur_dir_r
            c += cur_dir_c
    return False

def main():
    player1 = "X"
    player2 = "O"
    current_player = player1

    while True:
        display_board(board)
        print("Player {}'s turn. Move to which row?".format(current_player))
        row = int(input())
        print("Player {}'s turn. Move to which column?".format(current_player))
        col = int(input())
        place_piece(board, current_player, row, col)
        if check_winner(board, current_player, row, col):
            display_board(board)
            print("Player {} has won! Congratulations!".format(current_player))
            break
        if current_player == player1:
            current_player = player2
        else:
            current_player = player1

if __name__ == "__main__":
    main()
